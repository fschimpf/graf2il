"""
    Copyright 2015 Fritz Schimpf       

    This file is part of graf2il.py.

    graf2il is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    graf2il is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with graf2il.  If not, see <http://www.gnu.org/licenses/>.
"""

def generateSCL(filename, stepList, transitionList, digInDict, digOutDict):

    # create output file and write header. FIX: ask for overwrite:
    outfilename = filename.partition('.')[0] + '.scl'
    outfile = open(outfilename, 'w')

    outfile.write ('(* File autogenerated by graf2il.py *)\n\n')
    outfile.write ('FUNCTION_BLOCK "{0}"\n'.format(filename.partition('.')[0]))
    outfile.write ('VERSION : 0.1\n\n')

    # create input veriables for block:
    outfile.write ('    VAR_INPUT\n')
    for i in sorted(digInDict):
        outfile.write ('        {0} : Bool; (* attach to {1} *)\n'.format(i, digInDict[i]))
    outfile.write ('    END_VAR\n\n')

    # create output veriables for block:
    outfile.write ('    VAR_OUTPUT\n')
    for i in sorted(digOutDict):
        outfile.write ('        {0} : Bool; (* attach to {1} *)\n'.format(i, digOutDict[i]))
    outfile.write ('    END_VAR\n\n')

    # create variables for states:
    outfile.write ('    VAR\n')
    for thisStep in stepList:
        number, name, action, eid, memory = thisStep    # unpack tuple
        outfile.write ('        {0} : Bool;\n'.format(name))
    
    # create variables for transitions:
    for thisTransition in transitionList:
        nTransition, name, eid, fromStepn, fromStepMem, toStepn, condition, memory = thisTransition  # unpack tuple from List 
        outfile.write ('        {0} : Bool;\n'.format(name))
    outfile.write ('    END_VAR\n\n')

    # start to write program block, transitions
    outfile.write ('BEGIN\n')
    outfile.write ('    (* Transitions *)\n')

    for thisTransition in transitionList:
        nTransition, name, eid, fromStepn, fromStepMem, toStepn, condition, memory = thisTransition  # unpack tuple from List 
        outfile.write ('    IF #{0} AND #{1} THEN\n'.format(fromStepn, condition))  
        outfile.write ('        {0} := TRUE;\n'.format(name))
        outfile.write ('    END_IF\n')      

    


    # write footer and close file
    outfile.write('END_FUNCTION_BLOCK\n')
    outfile.close()
    print '.scl generated successfully. :-)'
